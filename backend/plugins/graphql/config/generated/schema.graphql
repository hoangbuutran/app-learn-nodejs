type Category {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  description: String
  block: Boolean
  products(sort: String, limit: Int, start: Int, where: JSON): [Product]
}

input CategoryInput {
  name: String!
  description: String
  block: Boolean
  products: [ID]
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Category
}

input createDishInput {
  data: DishInput
}

type createDishPayload {
  dish: Dish
}

input createOrderInput {
  data: OrderInput
}

type createOrderPayload {
  order: Order
}

input createProductInput {
  data: ProductInput
}

type createProductPayload {
  product: Product
}

input createRestaurantInput {
  data: RestaurantInput
}

type createRestaurantPayload {
  restaurant: Restaurant
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Category
}

input deleteDishInput {
  where: InputID
}

type deleteDishPayload {
  dish: Dish
}

input deleteOrderInput {
  where: InputID
}

type deleteOrderPayload {
  order: Order
}

input deleteProductInput {
  where: InputID
}

type deleteProductPayload {
  product: Product
}

input deleteRestaurantInput {
  where: InputID
}

type deleteRestaurantPayload {
  restaurant: Restaurant
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type Dish {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  description: String
  image: UploadFile
  price: Int
  restaurant: Restaurant
}

input DishInput {
  name: String
  description: String
  image: ID
  price: Int
  restaurant: ID
}

input editCategoryInput {
  name: String
  description: String
  block: Boolean
  products: [ID]
}

input editDishInput {
  name: String
  description: String
  image: ID
  price: Int
  restaurant: ID
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editOrderInput {
  address: String
  city: String
  dishes: JSON
  amount: Int
  state: String
  user: ID
}

input editProductInput {
  name: String
  description: String
  image: ID
  image_detail: [ID]
  price: Float
  total: Int
  category: ID
}

input editRestaurantInput {
  name: String
  description: String
  image: ID
  dishes: [ID]
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  orders: [ID]
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Category | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | Dish | createDishPayload | updateDishPayload | deleteDishPayload | Order | createOrderPayload | updateOrderPayload | deleteOrderPayload | Product | createProductPayload | updateProductPayload | deleteProductPayload | Restaurant | createRestaurantPayload | updateRestaurantPayload | deleteRestaurantPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  createDish(input: createDishInput): createDishPayload
  updateDish(input: updateDishInput): updateDishPayload
  deleteDish(input: deleteDishInput): deleteDishPayload
  createOrder(input: createOrderInput): createOrderPayload
  updateOrder(input: updateOrderInput): updateOrderPayload
  deleteOrder(input: deleteOrderInput): deleteOrderPayload
  createProduct(input: createProductInput): createProductPayload
  updateProduct(input: updateProductInput): updateProductPayload
  deleteProduct(input: deleteProductInput): deleteProductPayload
  createRestaurant(input: createRestaurantInput): createRestaurantPayload
  updateRestaurant(input: updateRestaurantInput): updateRestaurantPayload
  deleteRestaurant(input: deleteRestaurantInput): deleteRestaurantPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Order {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  address: String
  city: String
  dishes: JSON
  amount: Int
  state: String
  user: UsersPermissionsUser
}

input OrderInput {
  address: String
  city: String
  dishes: JSON
  amount: Int
  state: String
  user: ID
}

type Product {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  description: String!
  image: UploadFile
  price: Float
  total: Int!
  category: Category
  image_detail(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

input ProductInput {
  name: String!
  description: String!
  image: ID
  image_detail: [ID]
  price: Float
  total: Int!
  category: ID
}

type Query {
  category(id: ID!): Category
  categories(sort: String, limit: Int, start: Int, where: JSON): [Category]
  dish(id: ID!): Dish
  dishes(sort: String, limit: Int, start: Int, where: JSON): [Dish]
  order(id: ID!): Order
  orders(sort: String, limit: Int, start: Int, where: JSON): [Order]
  product(id: ID!): Product
  products(sort: String, limit: Int, start: Int, where: JSON): [Product]
  restaurant(id: ID!): Restaurant
  restaurants(sort: String, limit: Int, start: Int, where: JSON): [Restaurant]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

type Restaurant {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  description: String
  image: UploadFile
  dishes(sort: String, limit: Int, start: Int, where: JSON): [Dish]
}

input RestaurantInput {
  name: String
  description: String
  image: ID
  dishes: [ID]
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateCategoryInput {
  where: InputID
  data: editCategoryInput
}

type updateCategoryPayload {
  category: Category
}

input updateDishInput {
  where: InputID
  data: editDishInput
}

type updateDishPayload {
  dish: Dish
}

input updateOrderInput {
  where: InputID
  data: editOrderInput
}

type updateOrderPayload {
  order: Order
}

input updateProductInput {
  where: InputID
  data: editProductInput
}

type updateProductPayload {
  product: Product
}

input updateRestaurantInput {
  where: InputID
  data: editRestaurantInput
}

type updateRestaurantPayload {
  restaurant: Restaurant
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  orders: [ID]
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsUser {
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  orders(sort: String, limit: Int, start: Int, where: JSON): [Order]
}
